procedure getExpectedAModel(){
	return true
}

/*********************
   Blocks World
*********************/

vocabulary V{
type Time isa int
type Block

// Initial and goal state predicates.
InitiallyOn(Block,Block)
InitiallyOnTable(Block)
GoalOn(Block,Block)
GoalOnTable(Block)
TFinal : Time 

 
// Move(x,y,t) means: at time t, x is placed on y
// MoveToTable(x,y,t) means: at time t, x is placed on the table
Move(Block,Block,Time)
MoveToTable(Block,Time)

 
// On(x,y,t) means: at time t, x is on y.
// OnTable(x,t) means: at time t, x is on the table.
On(Block,Block,Time)
OnTable(Block,Time)
// Top(x,t) means: at time t, there is no block on x.
Top(Block,Time)
// NotMoved(x,t) means: at time t, block x is not moved.
NotMoved(Block,Time)
// NotPlacedOn(x,t) means: at time t, there is no block placed on x.
NotPlacedOn(Block,Time)

}

theory T : V { 
{ On(x,y,0) <- InitiallyOn(x,y).
  On(x,y,t1 + 1) <- Move(x,y,t1).
  On(x,y,t1 + 1) <- On(x,y,t1) & NotMoved(x,t1). }

{ OnTable(x,0) <- InitiallyOnTable(x).
  OnTable(x,t1 + 1) <- MoveToTable(x,t1).
  OnTable(x,t1 + 1) <- OnTable(x,t1) & NotMoved(x,t1). }

{ NotMoved(x,t) <- (! y : ~Move(x,y,t) & ~MoveToTable(x,t)). }
{ NotPlacedOn(x,t) <- ! y : ~Move(y,x,t). }

{ Top(x,0) <- ! y : ~InitiallyOn(y,x).
  Top(x,t1 + 1) <- Move(x,y,t1).
  Top(x,t1 + 1) <- On(y,x,t1) & MoveToTable(y,t1).
  Top(x,t1 + 1) <- On(y,x,t1) & Move(y,z,t1) & ~(z = x).
  Top(x,t1 + 1) <- MoveToTable(x,t1).
  Top(x,t1 + 1) <- Top(x,t1) & NotPlacedOn(x,t1). }

// At most one block is moved each timestep.
! x1 x2 y1 y2 t : (Move(x1,y1,t) & Move(x2,y2,t)) => (x1 = x2 & y1 = y2).
! x1 x2 t : (MoveToTable(x1,t) & MoveToTable(x2,t)) => (x1 = x2).
! x y z t : ~(Move(x,y,t) & MoveToTable(z,t)).
! x t : ~Move(x,x,t).

// After the final stage, don't move a block.
! x y : ~Move(x,y,TFinal).
! x : ~MoveToTable(x,TFinal).

// Only free blocks can be moved.
! x y t : Move(x,y,t) => Top(x,t) & Top(y,t).
! x t : MoveToTable(x,t) => Top(x,t).

// Goal must be reached.
! x y : GoalOn(x,y) => On(x,y,TFinal).
! x : GoalOnTable(x) => OnTable(x,TFinal).

}

structure S : V{ 
Time = {0..11}
TFinal = 11
Block = {A..F;N..S}

InitiallyOn = {A,B; B,C; C,D; D,E; E,F; 
					 N,O; O,P; P,Q; Q,R; R,S;}
InitiallyOnTable = {F;S}
GoalOn = {A,B;B,C;C,D;D,E;E,F;F,N;N,O;O,P;P,Q;Q,R;R,S}
GoalOnTable = {S}


}
