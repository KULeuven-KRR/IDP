procedure getExpectedAModel(){
	return true
}

vocabulary V{
	
		type Piece
		type Colour 
		Black:Colour
		White:Colour
		type Type 
		King:Type
		Queen:Type
		type  Time isa int
		type  Row isa int
		type  Col isa int
	

	PColour(Piece) : Colour
	PType(Piece) : Type
	InitPos(Piece,Row,Col)

 
	Move(Time,Piece,Row,Col)

	Pos(Time,Piece,Row,Col)
	Moving(Time,Piece)

	KingMove(Row,Col,Row,Col)
	QueenMove(Row,Col,Row,Col)
}

theory T : V { 
	{ Moving(t,p) <- Move(t,p,r,c). }
	
	{ Pos(0,p,r,c) <- InitPos(p,r,c).
	  Pos(t+1,p,r,c) <- Move(t,p,r,c).
	  Pos(t+1,p,r,c) <- ~Moving(t,p) & Pos(t,p,r,c).  }
	
	// Move only one piece per timepoint
	! t : Time(t) => ?1 p : Moving(t,p).

	// Move to exactly one place
	! t p : Moving(t,p) => ?1 r c : Move(t,p,r,c).

	// Move white pieces on even timepoints, black ones on odd timepoints
	! t p : Moving(t,p) & (t % 2 = 0) => PColour(p) = White.
	! t p : Moving(t,p) & (t % 2 = 1) => PColour(p) = Black.

	// Description of allowed moves
		
		// King

		{ KingMove(r1,c1,r2,c2) <- abs(r1-r2) =< 1 & abs(c1-c2) =< 1. }
		! t p r1 c1 r2 c2: (Moving(t,p) & PType(p) = King & Pos(t,p,r1,c1) & Pos(t+1,p,r2,c2)) => KingMove(r1,c1,r2,c2).

		// Queen

		
	

}

structure S : V{ 
	Colour = { b; w }
	Black = b
	White = w
	Type = {k;q}
	King = k
	Queen = q
	Piece = { WhiteKing; BlackKing; WhiteQueen }
	Row = {1..8}
	Col = {1..8}
	Time = {0..3}
	PColour = { WhiteKing -> w; 
					WhiteQueen -> w;
					BlackKing -> b }
	PType = { WhiteKing -> k; 
				 WhiteQueen -> q;
				 BlackKing -> k }
	InitPos = { WhiteKing,3,3; WhiteQueen,2,8; BlackKing,1,3 }

}
