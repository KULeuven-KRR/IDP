/*********************
   Blocks World
*********************/


#include <mx>

vocabulary V {

	type Time isa nat
	type Block
	InitOn(Block,Block)
	GoalOn(Block,Block)
	Init : Time
	Final : Time
	Table : Block
	Move(Block,Block,Time)
	On(Block,Block,Time)
	Free(Block,Time)

}

theory T : V { 

	{ On(x,y,Init) <- InitOn(x,y).
	  On(x,y,t+1) <- Move(x,y,t).
	  On(x,y,t+1) <- On(x,y,t) & ~ (? z : Move(x,z,t)). }

	{ Free(Table,t).
	  Free(x,t) <- ~( ? y : On(y,x,t) ). }

	// At most one block is moved each timestep.
	! x1 x2 y1 y2 t : Move(x1,y1,t) & Move(x2,y2,t) => (x1 = x2 & y1 = y2).

	// After the final stage, don't move a block.
	! x t y: t >= Final => ~Move(x,y,t).

	// Only free blocks can be moved.
	! x y t : Move(x,y,t) => Free(x,t) & Free(y,t).
	
	// Don't move the table.
	! x t : ~Move(Table,x,t).

	// Goal must be reached.
	! x y : GoalOn(x,y) => On(x,y,Final).

}

structure S : V {
	Time = {0..3}
	Block = {A..C; Table}
	InitOn = { A,B; B,C }
	GoalOn = { C,B; B,A }
	Init = 0
	Final = 3
	Table = Table
}
