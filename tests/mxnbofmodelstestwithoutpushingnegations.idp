#include <mx>

procedure main() {
	stdoptions.nbmodels = 0
	stdoptions.timeout = 10
	stdoptions.groundwithbounds = false
	solutions = all_no_push(T,S)
	io.stderr:write("Found "..#solutions.." models, expected "..getExpectedNbOfModels().." models.\n")
	if(#solutions~=getExpectedNbOfModels()) then
		return 0
	end 
	
	for i,v in ipairs(solutions) do
		if(#modelexpand(T, v)==0) then
			io.stderr:write("Found an invalid solution.\n")
			return 0
		end
	end
	return 1
}


procedure all_no_push(T,S) {
		Opts = getoptions()
		local oldnbmodels = Opts.nbmodels
		Opts.nbmodels = 0
		local solutions, trace = modelexpand_no_push(T,S)
		Opts.nbmodels = oldnbmodels
		return solutions, trace
	}
	
	procedure modelexpand_no_push(theory, structure) {
	local solutions, trace = expand_no_push(theory,structure)
	local solutions2 = alltwovaluedextensions(solutions)
	return solutions2, trace
}

procedure expand_no_push(theory, structure){
	if type(theory) ~= "theory" then
		print("Error: theory expected")
		return
	end
	if type(structure) ~= "structure" then
		print("Error: structure expected")
		return
	end
	
	local clonetheo = clone(theory)
	return idpintern.modelexpand(clonetheo,structure) 
}
	
	
