include <mx>
include "standardoptions.idp"

procedure satnobounds(){
  standardoptions()
	stdoptions.groundwithbounds = false
	stdoptions.liftedunitpropagation = false
	stdoptions.timeout = 10
	return run()
}

procedure satnoboundslong(){
  standardoptions()
	stdoptions.groundwithbounds = false
	stdoptions.liftedunitpropagation = false
	stdoptions.timeout = 200
	return run()
}

// NOTE: only based on lazy tseitin delaying!!!!
procedure satlazy(){
  standardoptions()
	stdoptions.tseitindelay = true
	stdoptions.timeout = 10
	stdoptions.xsb=false
	return run()
}

// NOTE: never enable delaying here which depends on well-founded definitions!
procedure satverylazy(){
  standardoptions()
  stdoptions.cpsupport=false
	stdoptions.groundwithbounds = true
	stdoptions.liftedunitpropagation=false
	stdoptions.satdelay=true
	stdoptions.tseitindelay=true
	stdoptions.timeout = 10
	return run()
}

procedure satwithbounds(){
  standardoptions()
	stdoptions.groundwithbounds = true
	stdoptions.liftedunitpropagation = true
	stdoptions.timeout = 10
	return run()
}

procedure satstable(){
  standardoptions()
	stdoptions.stablesemantics=true
	stdoptions.groundwithbounds = true
	stdoptions.liftedunitpropagation = true
	stdoptions.timeout = 10
	return run()
}

procedure satnonreduced(){
  standardoptions()
	stdoptions.reducedgrounding = false
	stdoptions.groundwithbounds = true
	stdoptions.liftedunitpropagation = true
	stdoptions.timeout = 15
	return run()
}

procedure satwithboundslong(){
  standardoptions()
	stdoptions.groundwithbounds = true
	stdoptions.liftedunitpropagation = true
	stdoptions.timeout = 200
	return run()
}

procedure satwithoutcp(){
  standardoptions()
	stdoptions.cpsupport = false
	stdoptions.cpgroundatoms = false
	stdoptions.timeout = 5
	return run()
}
procedure satwithfullcp(){
  standardoptions()
	stdoptions.cpsupport = true
	stdoptions.cpgroundatoms = true
	stdoptions.timeout = 10
	return run()
}
procedure satwithskolems(){
  standardoptions()
	stdoptions.cpsupport = true
	stdoptions.cpgroundatoms = true
	stdoptions.skolemize=true
	stdoptions.timeout = 10
	return run()
}

procedure satwithsymm(){
  standardoptions()
	stdoptions.timeout = 30
	stdoptions.cpsupport = true
	stdoptions.xsb=true
	stdoptions.symmetrybreaking = "static"
	return run()
}

procedure satwithxsb(){
  standardoptions()
	stdoptions.timeout = 5
	stdoptions.groundwithbounds = false
	stdoptions.liftedunitpropagation = false
	stdoptions.xsb=true
	return run()
}

procedure run() {
	if(allowed~=nil) then
		if (not allowed()) then 
			print("NOT running this test in this context!")
			return 1
		end
	end
	stdoptions.verbosity.grounding=0
	stdoptions.verbosity.solving=0
	start = os.clock()
	stdoptions.nbmodels=1
	solution = modelexpand(T,S,Vout)
	io.stderr:write("Mx took "..os.clock()-start.." sec\n")
	
	if(solution==nil or #solution~=1) then
		if(getExpectedAModel()) then
			io.stderr:write("Found UNSAT, expected SAT.\n")
			return 0
		else
			io.stderr:write("Found UNSAT, expected UNSAT.\n")
			return 1
		end
	end
	
	if(shouldNotCheck~=nil) then
		print("NOTE: solutions unchecked because too expensive!")
		return 1;
	end

	structure = solution[1]
	if(Vout~=nil and Vout~=V) then
		setvocabulary(structure,V) // TODO merge should do setvoc?
		structure = merge(S,structure)
	end
	sols = modelexpand(T, structure, Vout)
	if(not isconsistent(merge(S,structure)) or sols==nil or #sols==0) then
		io.stderr:write("Found an invalid partial model.\n")
		io.stderr:write(tostring(structure))
		return 0
	end
	io.stderr:write("Found SAT, expected SAT.\n")
	return 1
}
