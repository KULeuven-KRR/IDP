#include <mx>

procedure satnobounds(){
	stdoptions.groundwithbounds = false
	stdoptions.liftedunitpropagation = false
	stdoptions.timeout = 5
	return run()
}

procedure satnoboundslong(){
	stdoptions.groundwithbounds = false
	stdoptions.liftedunitpropagation = false
	stdoptions.timeout = 200
	return run()
}

procedure satwithbounds(){
	stdoptions.groundwithbounds = true
	stdoptions.liftedunitpropagation = true
	stdoptions.timeout = 5
	return run()
}

procedure satnonreduced(){
	stdoptions.reducedgrounding = false
	stdoptions.groundwithbounds = true
	stdoptions.liftedunitpropagation = true
	stdoptions.timeout = 5
	return run()
}

procedure satwithboundslong(){
	stdoptions.groundwithbounds = true
	stdoptions.liftedunitpropagation = true
	stdoptions.timeout = 200
	return run()
}

procedure satwithcp(){
	stdoptions.cpsupport = true
	stdoptions.groundwithbounds = true
	stdoptions.liftedunitpropagation = true
	stdoptions.timeout = 5
	return run()
}

procedure satwithsymm(){
	stdoptions.timeout = 5
	stdoptions.groundwithbounds = false
	stdoptions.liftedunitpropagation = false
	stdoptions.symmetrybreaking = "static"
	return run()
}

procedure run() {	
	solution = onemodel(T,S)
	
	if(solution==nil) then
		if(getExpectedAModel()) then
			io.stderr:write("Found UNSAT, expected SAT.\n")
			return 0
		else
			io.stderr:write("Found UNSAT, expected UNSAT.\n")
			return 1
		end
	end

	if(#modelexpand(T, solution)==0) then
		io.stderr:write("Found an invalid partial model.\n")
		return 0
	end
	io.stderr:write("Found SAT, expected SAT.\n")
	return 1
}
