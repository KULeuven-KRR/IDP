vocabulary V{
	type item isa nat  //1 ..n
	type domain isa nat // 1..n*n
	type smalldomain isa domain // 1..n
	W(item):smalldomain  //gewicht input
	P(item):smalldomain  //profit input
	MaxW:domain // allowed max weight, input
	
	Smaller(item,item) // Smaller(x,y) iff x < y (must be total)
	Largest:item
	Smallest:item
	
	Next(item):item // mapping to next in order
	Prev(item):item // mapping to previous in order
	
// CURRENTLY DISABLED THESE SYMBOLS (WHICH ARE DEFINED BY RECURSION OVER AGGREGATES)
// 	InInitial(item)
// 	AccWInitial(item):domain
}

theory T:V{
	// define total order on items using a strictly smaller predicate
	// Smaller(i,j) iff profit/weight of i > profit/weight of j.
	// This way, the profit to weight ratio is descending (see paper)
	{ Smaller(i,j) <- P(i)/W(i) > P(j)/W(j).
	  Smaller(i,j) <- P(i)/W(i) = P(j)/W(j) & i>j. }
	// note: Smallest = item with best profit to weight ratio
	// note: Largest = item with worst profit to weight ratio
	{ Largest=i <- !j: i~=j => Smaller(j,i).}
	{ Smallest=i <- !j: ~Smaller(j,i).}

	// Defining a next predicate mapping i -> i+1, and i_max -> i_max
	{ 
		Next(i)=j <- Smaller(i,j) & ~?k[item]: Smaller(i,k) & Smaller(k,j).
		Next(Largest)=Largest. 
	}
	
	// Defining a prev predicate mapping i -> i-1, and i_min -> i_min
	{ 
		Prev(i)=j <- j~=Largest & Next(j)=i.
		Prev(Smallest)=Smallest.
	}
	
	/* CURRENTLY DISABLED THIS DEFINITION (WHICH HAS RECURSION OVER AGGREGATES)
	// Calculating initial upper bound
	{ 
		InInitial(Smallest) <- MaxW >= W(Smallest).
		InInitial(i) <- i~= Smallest & MaxW >= W(i)+AccWInitial(Prev(i)). 
		AccWInitial(i)=sum{j:(Smaller(j,i) | i=j) & InInitial(j):W(j)}.
	}*/
}

structure S:V{
  item={1..30}
  MaxW={->90}
  domain={1..900}
  smalldomain={1..30}
  
  W={ 1,5;2,5;3,5;4,4;5,6;6,5;7,2;8,8;9,10;
      10,6;11,8;12,16;13,15;14,15;15,27;16,29;
      17,27;18,27;19,27;20,26;21,19;22,28;
      23,30;24,10;25,19;26,27;27,28;28,22;
      29,15;30,23;}
  P={ 1,27;2,24;3,21;4,15;5,21;6,16;7,6;8,22;
      9,27;10,14;11,18;12,30;13,24;14,16;15,27;
      16,29;17,25;18,24;19,22;20,19;21,13;22,18;
      23,18;24,5;25,9;26,12;27,11;28,7;29,2;30,2;}
}
