procedure getExpectedAModel(){
	return true
}

vocabulary V{
	type Block isa int
	
	type Pos 
	Left:Pos
	Right:Pos
	Center:Pos
	
	type Step isa int
	MaxStep: Step
	
	Move(Block,Pos,Step)
	
	At_pos(Block,Pos,Step)
}

theory T : V { 
	{
		At_pos(x,Left,0).
		At_pos(x,p,s2) <- ?s1[Step]: s2-1=s1 & Move(x,p,s1).
		At_pos(x,p,s2) <- ?s1[Step]: s2-1=s1 & At_pos(x,p,s1) & ~(?pn: Move(x,pn,s1)). 
	}
	
	// Only one move for each timestep.
	!x1 x2 p1 p2 s: Move(x1,p1,s) & Move(x2,p2,s) => (x1=x2 & p1=p2).
	
	// Description of allowed moves.
	!x p s: Move(x,p,s) => (!y: At_pos(y,p,s) => y>x).
	!x p2 p1 s: Move(x,p2,s) & At_pos(x,p1,s) => (!y: At_pos(y,p1,s) => y>=x).
	
	// Goal state must be reached.
	!x: Block(x) => At_pos(x,Right,MaxStep).
	
	!x p: ~Move(x,p,MaxStep).
}

structure S : V{ 
	Pos = {l;r;c}
	Left = l
	Right = r
	Center = c
	Step = {0..8}
	Block = {1..3}
	MaxStep = 8
}
