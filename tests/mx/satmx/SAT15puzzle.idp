procedure getExpectedAModel(){
	return true
}


vocabulary V{
	type Time isa int
	type Entry isa int
	type Pos isa int
	
	InitIn(Pos,Pos,Entry)
	Empty : Entry


 
	Out(Pos,Pos,Entry)
	MaxTime:Time

 
	Moving(Time,Entry)
	Move(Time,Pos,Pos)	// Position the blank entry is moved to.
	NextTo(Pos,Pos,Pos,Pos)
	In(Time,Pos,Pos,Entry)
	Goal(Pos,Pos,Entry)

}

theory T : V { 

	// Positions that are next to each other
	{ NextTo(r1,c1,r2,c2) <- abs(r1 - r2) + abs(c1 - c2) = 1. }

	// Allowed moves
	! t r c : Move(t,r,c) => (? or oc : NextTo(r,c,or,oc) & In(t,or,oc,Empty)).

	// Only one move per timestep
	! t r1 c1 r2 c2 : Move(t,r1,c1) & Move(t,r2,c2) => (r1 = r2 & c1 = c2).

	// Do a move on each timestep before the final step
	! t : /*Time(t) &*/ t < MaxTime => (? r c : Move(t,r,c)).
	
	// Do not move after the final step 
	! (t r c) sat t >= MaxTime : ~Move(t,r,c).

	// Optimization: Don't move immediately back to the previous position 
	! t r1 c1 r2 c2 : Move(t,r1,c1) & In(t,r2,c2,Empty) => ~Move(t+1,r2,c2).
	
	{	
		Moving(t,e) <- t < MaxTime & Move(t,r,c) & In(t,r,c,e).			// The moving entry

		In(0,r,c,e) <- InitIn(r,c,e).												// Initial positions 
		In(t+1,r,c,Empty) <- Move(t,r,c).										// Position of blank entry
		In(t+1,r,c,e) <- e ~= Empty & In(t,r,c,e) & ~Moving(t,e).		// Frame axiom
		In(t+1,r,c,e) <- e ~= Empty & In(t,r,c,Empty) & Moving(t,e).	// New position of moving entry
	}

	{ Out(r,c,e) <- In(MaxTime,r,c,e). }

	// Goal configuration
	{ Goal(r,c,e) <- e = ((r - 1) * 4) + (c - 1). } 

	// Goal must be reached at the final timepoint
	! (r c e) in Goal: In(MaxTime,r,c,e).


}

structure S : V{ 
	Time = {0..3}
	Pos = {1..4}
	Entry = {0..15}
	Empty = 0

	InitIn = {	1,1,1;	1,2,2;	1,3,3;	1,4,0;
					2,1,4;	2,2,5;	2,3,6;	2,4,7;
					3,1,8;	3,2,9;	3,3,10;	3,4,11;
					4,1,12;	4,2,13;	4,3,14;	4,4,15 }

/*	Time = {0..28}
	Pos = {1..4}
	Entry = {0..15}
	Empty = 0

	InitIn = {	1,1,13;	1,2,1;	1,3,2;	1,4,3;
					2,1,8;	2,2,4;	2,3,6;	2,4,10;
					3,1,12;	3,2,11;	3,3,0;	3,4,7;
					4,1,14;	4,2,5;	4,3,9;	4,4,15 }
*/					
/*
	Time = {0..50}
	MaxTime = 50
	Pos = {1..4}
	Entry = {0..15}
	Empty = 0

	InitIn = {	1,1,0;	1,2,1;	1,3,2;	1,4,3;
					2,1,4;	2,2,5;	2,3,6;	2,4,7;
					3,1,8;	3,2,9;	3,3,10;	3,4,11;
					4,1,12;	4,2,13;	4,3,14;	4,4,15 } */
}
