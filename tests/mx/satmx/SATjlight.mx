procedure getExpectedAModel(){
	return true
}

vocabulary V{
	type Num isa int
	type Row isa int
	type Col isa int
	type Dir 
	Left:Dir
	Right:Dir
	Up:Dir
	Down:Dir

	Black(Row,Col)
	ContN(Row,Col,Num)
 
	ContL(Row,Col)
 
	Illum(Row,Col)
	Illum(Row,Col,Dir)
	NextTo(Row,Col,Row,Col)
}

theory T : V { 
	{ NextTo(r1,c1,r2,c2) <- abs(r1-r2) + abs(c1-c2) = 1. }
	! r c n : n = #{ rn cn : NextTo(r,c,rn,cn) & ContL(rn,cn) } | ~ContN(r,c,n).
	{ 
	  Illum(r,c) <- Illum(r,c,d). 
	  Illum(r,c,Left) <- ~Black(r,c) & ContL(r,c-1).
	  Illum(r,c,Right) <- ~Black(r,c) & ContL(r,c+1).
	  Illum(r,c,Up) <- ~Black(r,c) & ContL(r-1,c).
	  Illum(r,c,Down) <- ~Black(r,c) & ContL(r+1,c). 
	  Illum(r,c,Left) <- ~Black(r,c) & Illum(r,c-1,Left).
	  Illum(r,c,Right) <- ~Black(r,c) & Illum(r,c+1,Right).
	  Illum(r,c,Up) <- ~Black(r,c) & Illum(r-1,c,Up).
	  Illum(r,c,Down) <- ~Black(r,c) & Illum(r+1,c,Down). 
	}
	! r c : ~Black(r,c) & ~ContL(r,c) & Row(r) & Col(c) => Illum(r,c).
	! r c : ContL(r,c) => ~Illum(r,c).
	! r c : Black(r,c) => ~ContL(r,c).
}

structure S : V{ 
	Dir = {l;r;u;d}
	Left = l
	Right = r
	Up = u
	Down = d
	Row = {1..7}
	Col = {1..7}
	Num = {0..4}
	Black = { 2,3; 2,4; 3,6; 4,2; 4,4; 4,6; 5,2; 6,4; 6,5 }
	ContN = { 2,3,2; 3,6,0; 4,2,1; 4,4,1; 4,6,0; 5,2,0; 6,4,2; 6,5,1 }
//	Black = { 1,6; 2,1; 2,5; 3,2; 4,4; 5,6; 6,3; 6,7; 7,2 }
//	ContN = { 1,6,0; 2,1,1; 2,5,1; 3,2,2; 4,4,1; 5,6,2; 6,7,3 }
}
