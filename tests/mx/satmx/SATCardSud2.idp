procedure getExpectedAModel(){
	return true
}

vocabulary V{
	type Num isa int
	Given(Num,Num,Num)
	InBlock(Num,Num,Num)

 
	Sudoku(Num,Num) : Num

}

theory T : V { 
	! r c n : Given(r,c,n) => Sudoku(r,c) = n.
	! r n : ?1 c : Num(n) & Sudoku(r,c) = n.
	! c n : ?1 r : Num(n) & Sudoku(r,c) = n.
	! b n : ?1 r c : Num(n) & InBlock(b,r,c) & Sudoku(r,c) = n.

}

structure S : V{ 
Num = {1..9}
Given = { 1,1,6; 1,8,4; 2,3,5; 2,6,2; 2,9,7; 3,1,7; 3,2,2; 3,3,9; 3,9,3; 4,2,9; 4,5,4; 4,9,1; 5,5,6; 6,1,4; 6,5,8; 6,8,7; 7,1,3; 7,7,1; 7,8,6; 7,9,5; 8,1,2; 8,4,4; 8,7,8; 9,2,5; 9,9,4 }
InBlock = {1,1,1; 1,1,2; 1,1,3; 1,2,1; 1,2,2; 1,2,3; 1,3,1; 1,3,2; 1,3,3; 2,1,4; 2,1,5; 2,1,6; 2,2,4; 2,2,5; 2,2,6; 2,3,4; 2,3,5; 2,3,6; 3,1,7; 3,1,8; 3,1,9; 3,2,7; 3,2,8; 3,2,9; 3,3,7; 3,3,8; 3,3,9; 4,4,1; 4,4,2; 4,4,3; 4,5,1; 4,5,2; 4,5,3; 4,6,1; 4,6,2; 4,6,3; 5,4,4; 5,4,5; 5,4,6; 5,5,4; 5,5,5; 5,5,6; 5,6,4; 5,6,5; 5,6,6; 6,4,7; 6,4,8; 6,4,9; 6,5,7; 6,5,8; 6,5,9; 6,6,7; 6,6,8; 6,6,9; 7,7,1; 7,7,2; 7,7,3; 7,8,1; 7,8,2; 7,8,3; 7,9,1; 7,9,2; 7,9,3; 8,7,4; 8,7,5; 8,7,6; 8,8,4; 8,8,5; 8,8,6; 8,9,4; 8,9,5; 8,9,6; 9,7,7; 9,7,8; 9,7,9; 9,8,7; 9,8,8; 9,8,9; 9,9,7;9,9,8; 9,9,9}

}
