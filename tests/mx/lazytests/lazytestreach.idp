vocabulary V{
	type vertex
	edge(vertex, vertex)
	start:vertex
	query:vertex
	reachable(vertex)
}

theory T: V{
	reachable(query).
	{
		!x: reachable(x) <- x=start.
		!x y: reachable(x) <- reachable(y) & (edge(x, y) | edge(y, x)).
	}
}

structure S: V {
	vertex = {1..10}
	edge = {1,2;2,1;3,4;4,5;5,6;6,7;7,8;8,9;9,10;10,3;}
	start = 1
	query = 2
}

#include <mx>

procedure getonesol(){
	stdoptions.groundlazily=false
	stdoptions.verbosity.solving=4
	stdoptions.groundverbosity=4
	stdoptions.randomvaluechoice = true
	stdoptions.longnames = false
	return onemodel(T, S)
}

procedure main(){
	Sol = getonesol()
	mx::printtuples("reachable<ct>", Sol[V::reachable].ct)
	mx::printtuples("reachable<cf>", Sol[V::reachable].cf)
}
