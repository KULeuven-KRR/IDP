#include <mx>
#include <createStructureFromFile>

vocabulary V{
	type Vtx
	Edge(Vtx,Vtx)
	SymEdge(Vtx,Vtx)
	Reaches(Vtx,Vtx) //the query

	Connected
	Path(Vtx, Vtx)
}
vocabulary Vout{
	extern V::Connected/0
}
theory T:V{
/*	{
		// TODO bugged because the grounder does not derive good bounds for SymEdge!
//		SymEdge(a,b) <- Edge(a,b) | Edge(b,a).
//		Path(a,x) <- SymEdge(a,x).
//		Path(a,x) <- Path(a,y) & SymEdge(y,x).
		Path(a,x) <- Edge(a,x).
		Path(a,x) <- Path(a,y) & Edge(y,x).
	}*/
	Connected <=> ?a b: Reaches(a,b).// & Path(a,b).
}
structure STest:V{
	Vtx = {1..20}
	Edge = {1,2;2,3;3,4;5,6;6,7;7,20;15,11;16,1;14,1} 
	Reaches = {1,4}
}
procedure main(inputfilename, tsdelay, satdelay){
	structure = createStructureFromFile(inputfilename)
	//structure = STest
	stdoptions.liftedunitpropagation=true
	stdoptions.groundlazily= tsdelay or satdelay
	stdoptions.tseitindelay = tsdelay
	stdoptions.satdelay = satdelay
	stdoptions.groundverbosity=0
	stdoptions.satverbosity=4
	print(modelexpand(T, structure,Vout)[1])
}
