%{
#include <iostream>
#include <string>
#include <sstream>
using namespace std;

#include "parser.hh"

stringstream ss;
stringstream results;
stringstream error;
%}

/* lex definitions: */
%option noyywrap never-interactive nounput

COLOR	\x1b\[[0-9;]*m

/*
UNUSED:

%s printline
<INITIAL>"[==========]" 			{ BEGIN(printline); }
<printline>[^\n]* 					{ ss << ">>>" << yytext; }
<printline>"\n"						{ yylval.str = new string(ss.str()); BEGIN(INITIAL); ss.str(""); return TEXT; }
<block>"Segmentation fault"[^\n]*	{ yylval.str = new string(ss.str()); BEGIN(INITIAL); ss.str(""); cerr << "FAILEDFAILED\n"; }

<*>[^\[\n]*		{}
*/

%s block
%s resultblock

%%

<*>{COLOR}?"[ RUN      ] "{COLOR}?				{ BEGIN(block); error << ss.str(); ss.str(""); }
<*>{COLOR}?"[  PASSED  ] "{COLOR}?				{ BEGIN(resultblock); error << ss.str(); ss.str(""); results << "Passed "; }
<*>{COLOR}?"[==========] "{COLOR}?				{ BEGIN(INITIAL); error << ss.str(); ss.str(""); }
<*>{COLOR}?"[----------] "{COLOR}?				{ BEGIN(INITIAL); error << ss.str(); ss.str(""); }
<block>.										{ ss << yytext; }
<block>\n										{ ss << "\n"; }
<block>{COLOR}?"[  FAILED  ] "{COLOR}?			{ BEGIN(INITIAL); yylval.str = new string(ss.str()); ss.str(""); return FAIL; }
<block>{COLOR}?"[       OK ] "{COLOR}?			{ BEGIN(INITIAL); yylval.str = new string(ss.str()); ss.str(""); return SUCCESS; }
<resultblock>{COLOR}?"[  FAILED  ] "{COLOR}?	{ results << yytext; }
<resultblock>.									{ ss << yytext; }
<resultblock>\n									{ results << ss.str() << "\n"; ss.str(""); }
<resultblock>\n\n								{ BEGIN(INITIAL); results << ss.str() << "\n"; ss.str(""); }
<*>{COLOR}										/* ignore */
<*>.											/* ignore */
<INITIAL>\n										/* ignore */
