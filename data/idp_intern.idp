/** Options **/

#options DefaultOptions {
	nrmodels=1
	language=idp
	modelformat=all
}

#procedure setoption(Opts,OptName,OptValue) {
	return idp_intern.idpcall("setoption",Opts,OptName,OptValue)
}

#procedure setoption(OptName,OptValue) {
	return setoption(DefaultOptions,OptName,OptValue)
}

/** Parsing of files **/
#procedure parse(filename) {
	return idp_intern.idpcall("load_file",filename)
}

/** Model expansion **/
#procedure model_expand(Theo,Struct) {
	return idp_intern.idpcall("model_expand",Theo,Struct)
}

#procedure model_expand(Theo,Struct,Opt) {
	return idp_intern.idpcall("model_expand",Theo,Struct,Opt)
}

/** Printing **/
#procedure idptostring(obj) {
	return idp_intern.idpcall("print",obj)
}

#procedure idptostring(obj,opts) {
	return idp_intern.idpcall("print",obj,opts)
}

/** Copying **/
#procedure clone(obj) {
	return idp_intern.idpcall("clone",obj)
}

/** Procedures for advanced use of IDP **/
#namespace IDP_ADVANCED {
	
	#procedure push_negations(T) {
		return idp_intern.idpcall("push_negations",T)
	}

	#procedure move_functions(T) {
		return idp_intern.idpcall("move_functions",T)
	}

	#procedure move_quantifiers(T) {
		return idp_intern.idpcall("move_quantifiers",T)
	}

	#procedure remove_eqchains(T) {
		return idp_intern.idpcall("remove_eqchains",T)
	}

	#procedure remove_equivalences(T) {
		return idp_intern.idpcall("remove_equivalences",T)
	}

	#procedure tseitin(T) {
		return idp_intern.idpcall("tseitin",T)
	}

	#procedure convert_to_theory(S) {
		return idp_intern.idpcall("convert_to_theory",S)
	}

	#procedure flatten(T) {
		return idp_intern.idpcall("flatten",T)
	}

	#procedure ground(T,S) {
		return idp_intern.idpcall("ground",T,S)
	}

	#procedure fastground(T,S) {
		return idp_intern.idpcall("fastground",T,S)
	}

	#procedure fastmx(T,S) {
		return idp_intern.idpcall("fastmx",T,S)
	}

	#procedure fastamx(T,S,Opt) {
		return idp_intern.idpcall("fastmx",T,S,Opt)
	}

	#procedure reduce(T,S) {
		return idp_intern.idpcall("reduce",T,S)
	}

	#procedure totheory(S) {
		return idp_intern.idpcall("convert_to_theory",S);
	}

}

